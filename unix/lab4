
#########################=-> Процессы <-=########################



От оптимальной настройки подсистемы управления процессами и числа одно
временно выполняющихся процессов зависит загрузка ресурсов процессо�
ра, что в свою очередь имеет непосредственное влияние на производи�
тельность системы в целом. Ядро операционной системы предоставляет
задачам базовый набор услуг, определяемый интерфейсом системных вы�
зовов. К ним относятся основные операции по работе с файлами, управ�
ление процессами и памятью, поддержка межпроцессного взаимодействия.
Дополнительные функциональные возможности системы, т. е. услуги, ко�
торые она предоставляет пользователям, определяются активными процес�
сами. От того, какие процессы выполняются в вашей системе, зависит,
является ли она сервером базы данных или сервером сетевого доступа,
средством проектирования или вычислительным сервером. Даже так назы�
ваемые уровни выполнения системы (run levels).



#####=-> Типы процессов <-=#####


Системные процессы являются частью ядра и всегда расположены в оперативной памяти.
Системные процессы не имеют соответствующих им
программ в виде исполняемых файлов и запускаются особым образом при инициализации ядра системы.
Выполняемые инструкции и данные этих процессов находятся в ядре системы,
таким образом они могут вызывать
функции и обращаться к данным, недоступным для остальных процессов.

Системными процессами являются:
    shed (диспетчер свопинга),
    vhand (диспетчер страничного замещения),
    bdfflush (диспетчер буферного кэша) и
    madaemon (диспетчер памяти ядра).

К системным процессам следует отнести init, являющийся прародителем всех остальных процессов в UNIX.
Хотя init не является частью ядра, и его запуск происходит из исполняемого файла (/etc/init),
его работа жизненно важна для функционирования всей системы в целом.



Демоны -- это неинтерактивные процессы, которые запускаются обычным
образом — путем загрузки в память соответствующих им программ
(исполняемых файлов), и выполняются в фоновом режиме.
Обычно демоны запускаются при инициализации системы (но после инициализацииядра, подробнее см. главу 3)
и обеспечивают работу различных подсистем UNIX:
    системы терминального доступа,
    системы печати,
    системы сетевого доступа и сетевых услуг
    и т. п.

Демоны не связаны ни с одним пользовательским сеансом работы и не могут непосредственно управляться пользователем.
Большую часть времени демоны ожидают пока тот или иной процесс запросит определенную услугу,
например, доступ к файловому архиву или печать документа.



К прикладным процессам относятся все остальные процессы, выполняющиеся в системе.
Как правило, это процессы, порожденные в рамках пользовательского сеанса работы.
С такими процессами вы будете сталкиваться чаще всего.

Например, запуск команды ls(l) породит соответствующий процесс этого типа.

Важнейшим пользовательским процессом является основной командный интерпретатор (login shell),
который обеспечивает вашу работу в UNIX.


Пользовательские процессы могут выполняться как в интерактивном, так и в фоновом режиме,
но в любом случае время их жизни (и выполнения) ограничено сеансом работы пользователя.
При выходе из системы все пользовательские процессы будут уничтожены.

Интерактивные процессы монопольно владеют терминалом, и пока такой процесс не завершит свое выполнение,
пользователь не сможет работать с другими приложениями.



#####=-> Атрибуты процесса <-=#####



Идентификатор процесса Process ID
Каждый процесс имеет уникальный идентификатор PID, позволяющий ядру системы различать процессы.
Когда создается новый процесс, ядро присваивает ему следующий свободный (т. е. не ассоциированный ни с
каким процессом) идентификатор. Присвоение идентификаторов происхо�
дит по возрастающий, т. е. идентификатор нового процесса больше, чем
идентификатор процесса, созданного перед ним. Если идентификатор дос�
тиг максимального значения, следующий процесс получит минимальный
свободный PID и цикл повторяется. Когда процесс завершает свою работу,
ядро освобождает занятый им идентификатор.


Идентификатор родительского процесса Parent Process ID (PPID)
Идентификатор процесса, породившего данный процесс.


Приоритет процесса (Nice Number)
Относительный приоритет процесса, учитываемый планировщиком при
определении очередности запуска. Фактическое же распределение процессорных ресурсов определяется приоритетом выполнения,
зависящим от нескольких факторов, в частности от заданного относительного приоритета.
Относительный приоритет не изменяется системой на всем протяжении
жизни процесса (хотя может быть изменен пользователем или администратором) в отличие от приоритета выполнения,
динамически обновляемого ядром.


Терминальная линия (TTY)
Терминал или псевдотерминал, ассоциированный с процессом, если такой
существует. Процессы-демоны не имеют ассоциированного терминала.


Реальный (RID) и эффективный (EUID) идентификаторы пользователя
Реальным идентификатором пользователя данного процесса является
идентификатор пользователя, запустившего процесс. Эффективный иден�
тификатор служит для определения прав доступа процесса к системным
ресурсам (в первую очередь к ресурсам файловой системы). Обычно ре�
альный и эффективный идентификаторы эквивалентны, т. е. процесс име�
ет в системе те же права, что и пользователь, запустивший его. Однако
существует возможность задать процессу более широкие права, чем права
пользователя путем установки флага SUID, когда эффективному иденти�
фикатору присваивается значение идентификатора владельца исполняе�
мого файла (например, администратора).


Реальный (RGID) и эффективный (EGID) идентификаторы группы
Реальный идентификатор группы равен идентификатору первичной или
текущей группы пользователя, запустившего процесс. Эффективный иден�
тификатор служит для определения прав доступа к системным ресурсам по
классу доступа группы. Так же как и для эффективного идентификатора
пользователя, возможна его установка равным идентификатору группы
владельца исполняемого файла (флаг SGID).
Команда ps(l) (process status) позволяет вывести список процессов, выпол�
няющихся в системе, и их атрибуты:

ps -ef




При получении сигнала процесс имеет три варианта действий для выбора:
1. Он может игнорировать сигнал. Не следует игнорировать сигналы, вы�
званные аппаратной частью, например, при делении на 0 или ссылке
на недопустимые области памяти, так как дальнейшие результаты в
отношении данного процесса непредсказуемы.
2. Процесс может потребовать действия по умолчанию. Как ни печально,
обычно это сводится к завершению выполнения процесса.
3. Наконец, процесс может перехватить сигнал и самостоятельно обрабо�
тать его. Например, перехват сигнала SIGINT позволит процессу уда�
лить созданные им временные файлы, короче, достойно подготовиться
к "смерти". Следует иметь в виду, что сигналы SIGKILL и SIGSTOP
нельзя ни перехватить, ни игнорировать

По умолчанию команда kill посылает сигнал с номером 15 — SIGTERM
действие по умолчанию для которого — завершение выполнения процесса,
получившего сигнал.



Однако возможны ситуации, когда процесс не исчезает и в этом случае.
Это может произойти для следующих процессов:
 Процессы�зомби. Фактически процесса как такового не существует,
осталась лишь запись в системной таблице процессов, поэтому уда�
лить его можно только перезапуском операционной системы. Зомби
в небольших количествах не представляют опасности, однако если
их много, это может привести к переполнению таблицы процессов.
 
Процессы, ожидающие недоступные ресурсы NFS (Network File
System), например, записывающие данные в файл файловой системы
удаленного компьютера, отключившегося от сети. Эту ситуацию
можно преодолеть, послав процессу сигнал SIGINT или
 Процессы, ожидающие завершения операции с устройством, напри�
мер, перемотки магнитной ленты.



#########################=-> Управление процессами <-=########################


bg -- перевести задание в фоновый режим
fg -- перевести задание в интерактивный режим
nohup -- запустить команду с защитой от прерывания

ps -- вывести список процессов
jobs -- вывести список заданий текущего shell

kill -- послать процессу или заданию сигнал
killall -- послать процессу сигнал, используя его имя
pkill -- послать сигнал, процессам удовлетворяющим некоторым критериям

nice -- запустить команду с измененным приоритетом
renice -- изменить приоритет процесса



Обычно программой называют -- совокупность файлов, будь то набор исходных текстов,
объектных файлов или собственно выполняемый файл.

Для того чтобы программа могла быть запущена на выполнение,
операционная система сначала должна создать окружение или среду выполнения задачи,
куда относятся ресурсы памяти, возможность доступа к устройствам ввода/вывода и различным системным ресурсам,
включая услуги ядра.

Это окружение (среда выполнения задачи) получило название процесса.

Мы можем представить процесс как совокупность данных ядра системы,
необходимых для описания образа программы в памяти и управления ее выполнением.
Мы можем также представить процесс как программу в стадии ее выполнения,
поскольку все выполняющиеся программы представлены в UNIX в виде процессов.

Процесс состоит из инструкций, выполняемых процессором, данных и информации о выполняемой задаче, такой
как размещенная память, открытые файлы и статус процесса.

В то же время не следует отождествлять процесс с программой хотя бы потому,
что программа может породить более одного процесса.


Операционная система UNIX является многозадачной.
Это значит, что одновременно может выполняться несколько процессов, причем часть
процессов могут являться образцами одной программы.


В то же время процессы имеют возможность обмениваться друг с другом
данными с помощью предоставляемой UNIX системой межпроцессного
взаимодействия. В UNIX существует набор средств взаимодействия между
процессами, таких как
    сигналы (signals),
    каналы (pipes),
    разделяемая память (shared memory),
    семафоры (semaphores),
    сообщения (messages),
    файлы,
но в остальном процессы изолированы друг от друга.



